{
  "actores": [
    {
      "nombre": "-actor-base",
      "codigo": "class ActorBase {\n  tipo: String;\n  sprite: Phaser.GameObjects.Sprite;\n  pilas: Pilas;\n  id_color: number;\n  figura = \"\";\n  sin_rotacion: false;\n  automata: Automata;\n  colisiones: Actor[];\n  sensores: any[];\n  _etiqueta: string = null;\n  _vivo: boolean = true;\n  _animacion_en_curso: string = \"\";\n  _figura_ancho: number;\n  _figura_alto: number;\n  _figura_radio: number;\n  _es_texto: boolean = false;\n  _texto: any;\n  texto: any;\n  _id: any;\n  _nombre: any;\n\n  _habilidades: any[];\n\n  _fondo: any = null;\n  _fondo_imagen: string = \"\";\n  _dialogo: any = null;\n\n  propiedades_base = {\n    x: 0,\n    y: 0,\n    z: 0,\n    imagen: \"imagenes:sin_imagen.png\",\n\n    centro_x: 0.5,\n    centro_y: 0.5,\n    rotacion: 0,\n    escala_x: 1,\n    escala_y: 1,\n    transparencia: 0,\n    etiqueta: \"actor\",\n\n    espejado: false,\n    espejado_vertical: false,\n\n    figura: \"\",\n    figura_dinamica: true,\n    figura_ancho: 100,\n    figura_alto: 100,\n    figura_radio: 40,\n    figura_sin_rotacion: false,\n    figura_rebote: 1,\n    figura_sensor: false,\n\n    es_texto: false\n  };\n\n  propiedades: any = {\n    x: 0,\n    y: 0,\n    z: 0,\n    imagen: \"imagenes:sin_imagen.png\",\n    figura: \"\"\n  };\n\n  constructor(pilas) {\n    this.pilas = pilas;\n    this.automata = new Automata(this);\n    this.colisiones = [];\n    this._habilidades = [];\n  }\n\n  get propiedades_iniciales() {\n    return this.propiedades;\n  }\n\n  pre_iniciar(propiedades) {\n    let figura = propiedades.figura || \"\";\n\n    this._id =\n      propiedades.id || this.pilas.utilidades.obtener_id_autoincremental();\n    this._nombre = propiedades.nombre;\n\n    this.sensores = [];\n    this._figura_ancho = propiedades.figura_ancho;\n    this._figura_alto = propiedades.figura_alto;\n    this._figura_radio = propiedades.figura_radio;\n    this._es_texto = propiedades.es_texto;\n\n    switch (figura) {\n      case \"rectangulo\":\n        this.sprite = this.crear_sprite(\"matter\", propiedades.imagen);\n        this.figura = figura;\n\n        this.crear_figura_rectangular(\n          propiedades.figura_ancho,\n          propiedades.figura_alto\n        );\n\n        this.dinamico = propiedades.figura_dinamica;\n        this.sin_rotacion = propiedades.figura_sin_rotacion;\n        this.rebote = propiedades.figura_rebote;\n        this.sensor = propiedades.figura_sensor;\n        break;\n\n      case \"circulo\":\n        this.sprite = this.crear_sprite(\"matter\", propiedades.imagen);\n        this.figura = figura;\n        this.crear_figura_circular(propiedades.figura_radio);\n\n        this.dinamico = propiedades.figura_dinamica;\n        this.sin_rotacion = propiedades.figura_sin_rotacion;\n        this.rebote = propiedades.figura_rebote;\n        this.sensor = propiedades.figura_sensor;\n        break;\n\n      case \"ninguna\":\n      case \"\":\n        this.figura = figura;\n        this.sprite = this.crear_sprite(\"sprite\", propiedades.imagen);\n        break;\n\n      default:\n        throw Error(`No se conoce el tipo de figura ${figura}`);\n    }\n\n    this.interactivo = true;\n\n    this.rotacion = propiedades.rotacion || 0;\n    this.id_color = this.generar_color_para_depurar();\n    this.etiqueta = propiedades.etiqueta;\n\n    this.escala_x = propiedades.escala_x || 1;\n    this.escala_y = propiedades.escala_y || 1;\n\n    this.tipo = propiedades.tipo;\n    this.centro_x = propiedades.centro_x || 0.5;\n    this.centro_y = propiedades.centro_y || 0.5;\n    this.transparencia = propiedades.transparencia || 0;\n    this.x = propiedades.x || 0;\n    this.y = propiedades.y || 0;\n    this.z = propiedades.z || 0;\n    this.espejado = propiedades.espejado;\n    this.espejado_vertical = propiedades.espejado_vertical;\n\n    this.sprite[\"actor\"] = this;\n\n    if (propiedades.es_texto) {\n      this.texto = propiedades.texto;\n\n      if (propiedades.fondo) {\n        this.fondo = propiedades.fondo;\n      }\n    }\n\n    this.sprite.update = () => {\n      try {\n        this.actualizar();\n      } catch (e) {\n        this.pilas.mensajes.emitir_excepcion_al_editor(e, \"actualizar actor\");\n      }\n    };\n\n    this.sprite.on(\"pointerdown\", cursor => {\n      let posicion = this.pilas.utilidades.convertir_coordenada_de_phaser_a_pilas(\n        cursor.x,\n        cursor.y\n      );\n      this.cuando_hace_click(posicion.x, posicion.y, cursor);\n    });\n\n    this.sprite.on(\"pointerup\", cursor => {\n      let posicion = this.pilas.utilidades.convertir_coordenada_de_phaser_a_pilas(\n        cursor.x,\n        cursor.y\n      );\n      this.cuando_termina_de_hacer_click(posicion.x, posicion.y, cursor);\n    });\n\n    this.sprite.on(\"pointerout\", cursor => {\n      let posicion = this.pilas.utilidades.convertir_coordenada_de_phaser_a_pilas(\n        cursor.x,\n        cursor.y\n      );\n      this.cuando_sale(posicion.x, posicion.y, cursor);\n    });\n\n    this.sprite.on(\"pointermove\", cursor => {\n      let posicion = this.pilas.utilidades.convertir_coordenada_de_phaser_a_pilas(\n        cursor.x,\n        cursor.y\n      );\n      this.cuando_mueve(posicion.x, posicion.y, cursor);\n    });\n\n    this.pilas.escena.agregar_actor(this);\n  }\n\n  private crear_sprite(tipo, imagen_inicial) {\n    let galeria = null;\n    let imagen = null;\n\n    this.pilas.utilidades.validar_que_existe_imagen(imagen_inicial);\n\n    // Como las imágenes pueden ser cadenas que representen cuadros\n    // dentro de un spritesheet (caso \"spritesheet:imagen\") o el nombre de una\n    // imagen normal (caso \"imagen\") se utiliza esta comprobación para\n    // distinguir cualquiera de estos casos.\n    if (imagen_inicial.indexOf(\":\") > -1) {\n      galeria = imagen_inicial.split(\":\")[0];\n      imagen = imagen_inicial.split(\":\")[1];\n    } else {\n      galeria = null;\n      imagen = imagen_inicial;\n    }\n\n    switch (tipo) {\n      case \"matter\":\n        if (galeria) {\n          return this.pilas.modo.matter.add.sprite(0, 0, galeria, imagen);\n        } else {\n          return this.pilas.modo.matter.add.sprite(0, 0, imagen);\n        }\n        break;\n\n      case \"sprite\":\n        if (galeria) {\n          return this.pilas.modo.add.sprite(0, 0, galeria, imagen);\n        } else {\n          return this.pilas.modo.add.sprite(0, 0, imagen);\n        }\n        break;\n\n      default:\n        throw Error(`No se puede crear un sprite de tipo ${tipo}`);\n    }\n  }\n\n  protected copiar_atributos_de_sprite(origen, destino) {\n    destino.x = origen.x;\n    destino.y = origen.y;\n    destino.angle = origen.angle;\n    destino.scaleX = origen.scaleX;\n    destino.scaleY = origen.scaleY;\n\n    destino.alpha = origen.alpha;\n    destino.flipX = origen.flipX;\n    destino.flipY = origen.flipY;\n    destino.depth = origen.depth;\n\n    destino.setOrigin(origen.originX, origen.originY);\n  }\n\n  iniciar() {}\n\n  get interactivo() {\n    return this.sprite.input.enabled;\n  }\n\n  set interactivo(activo: boolean) {\n    if (activo) {\n      this.sprite.setInteractive();\n    } else {\n      this.sprite.disableInteractive();\n    }\n  }\n\n  set area_de_interactividad(v: any) {\n    console.warn(\n      \"No pude definir el area así, use definir_area_de_interactividad\"\n    );\n  }\n\n  definir_area_de_interactividad(ancho: number, alto: number) {\n    // TODO: usar hitArea.setSize cuando actualicemos phaser > 3.16.2\n    if (this.sprite) {\n      this.sprite.width = ancho;\n      this.sprite.height = alto;\n      this.sprite.input.hitArea.width = ancho;\n      this.sprite.input.hitArea.height = alto;\n      this.sprite.setOrigin(this.centro_x, this.centro_y);\n    } else {\n      console.log(\"aún no tiene sprite\");\n    }\n  }\n\n  get area_de_interactividad() {\n    let ancho = this.sprite.input.hitArea.width;\n    let alto = this.sprite.input.hitArea.height;\n\n    return { ancho, alto };\n  }\n\n  set fondo(fondo: string) {}\n\n  serializar() {\n    let texto = \"\";\n    let fondo = \"\";\n\n    if (this._es_texto) {\n      texto = this._texto.text;\n      fondo = this._fondo_imagen;\n    }\n\n    return {\n      tipo: this.tipo,\n      x: Math.round(this.x),\n      y: Math.round(this.y),\n      z: Math.round(this.z),\n      centro_x: this.centro_x,\n      centro_y: this.centro_y,\n      rotacion: this.rotacion,\n      escala_x: this.escala_x,\n      escala_y: this.escala_y,\n      imagen: this.imagen,\n\n      figura: this.figura,\n      figura_ancho: this.figura_ancho,\n      figura_alto: this.figura_alto,\n      figura_radio: this.figura_radio,\n\n      es_texto: this._es_texto,\n      texto: texto,\n      fondo: fondo,\n\n      espejado: this.espejado,\n      espejado_vertical: this.espejado_vertical,\n      transparencia: this.transparencia,\n      id_color: this.id_color\n    };\n  }\n\n  set etiqueta(etiqueta) {\n    this._etiqueta = etiqueta;\n  }\n\n  get etiqueta() {\n    return this._etiqueta;\n  }\n\n  generar_color_para_depurar() {\n    return this.pilas.utilidades.obtener_color_al_azar();\n  }\n\n  pre_actualizar() {\n    if (this.figura && this.sin_rotacion) {\n      (this.sprite as any).setAngularVelocity(0);\n    }\n\n    this.automata.actualizar();\n  }\n\n  get estado() {\n    return this.automata.estado;\n  }\n\n  set estado(estado) {\n    this.automata.estado = estado;\n  }\n\n  actualizar() {}\n\n  actualizar_habilidades() {\n    this._habilidades.map(h => {\n      h.actualizar();\n    });\n  }\n\n  actualizar_sensores() {\n    this.sensores.map(s => {\n      let {\n        x,\n        y\n      } = this.pilas.utilidades.convertir_coordenada_de_pilas_a_phaser(\n        this.x,\n        this.y\n      );\n      this.pilas.Phaser.Physics.Matter.Matter.Body.setPosition(s, {\n        x: x + s.distancia_x,\n        y: y - s.distancia_y\n      });\n\n      // Descarta colisiones con actores que ya no están en la escena.\n      s.colisiones = s.colisiones.filter(a => a._vivo);\n    });\n  }\n\n  get imagen(): string {\n    if (this.sprite.frame.name === \"__BASE\") {\n      return this.sprite.texture.key;\n    } else {\n      return `${this.sprite.texture.key}:${this.sprite.frame.name}`;\n    }\n  }\n\n  get nombre() {\n    return this._nombre;\n  }\n\n  set nombre(a: any) {\n    throw new Error(\"No puede definir este atributo\");\n  }\n\n  get id() {\n    return this._id;\n  }\n\n  set id(a: any) {\n    throw new Error(\"No puede definir este atributo\");\n  }\n\n  set imagen(nombre: string) {\n    let galeria = null;\n    let imagen = null;\n\n    this.pilas.utilidades.validar_que_existe_imagen(nombre);\n\n    if (nombre.indexOf(\":\") > -1) {\n      galeria = nombre.split(\":\")[0];\n      imagen = nombre.split(\":\")[1];\n    } else {\n      galeria = null;\n      imagen = nombre;\n    }\n\n    if (galeria) {\n      this.sprite.setTexture(galeria, imagen);\n    } else {\n      this.sprite.setTexture(imagen);\n    }\n  }\n\n  set x(_x: number) {\n    if (this.pilas.utilidades.es_animacion(_x)) {\n      this.pilas.animar(this, \"x\", _x);\n    } else {\n      this.pilas.utilidades.validar_numero(_x);\n      let { x } = this.pilas.utilidades.convertir_coordenada_de_pilas_a_phaser(\n        _x,\n        0\n      );\n      this.sprite.x = x;\n    }\n  }\n\n  get x() {\n    let { x } = this.pilas.utilidades.convertir_coordenada_de_phaser_a_pilas(\n      this.sprite.x,\n      0\n    );\n    return x;\n  }\n\n  set y(_y: number) {\n    if (this.pilas.utilidades.es_animacion(_y)) {\n      this.pilas.animar(this, \"y\", _y);\n    } else {\n      this.pilas.utilidades.validar_numero(_y);\n      let { y } = this.pilas.utilidades.convertir_coordenada_de_pilas_a_phaser(\n        0,\n        _y\n      );\n      this.sprite.y = y;\n    }\n  }\n\n  get y() {\n    let { y } = this.pilas.utilidades.convertir_coordenada_de_phaser_a_pilas(\n      0,\n      this.sprite.y\n    );\n    return y;\n  }\n\n  set z(_z: number) {\n    this.pilas.utilidades.validar_numero(_z);\n    this.sprite.depth = -_z;\n  }\n\n  get z() {\n    return -this.sprite.depth;\n  }\n\n  set rotacion(angulo: number) {\n    if (this.pilas.utilidades.es_animacion(angulo)) {\n      this.pilas.animar(this, \"rotacion\", angulo);\n    } else {\n      this.pilas.utilidades.validar_numero(angulo);\n      this.sprite.angle = -(angulo % 360);\n    }\n  }\n\n  get rotacion() {\n    return -this.sprite.angle % 360;\n  }\n\n  set escala_x(s) {\n    if (this.pilas.utilidades.es_animacion(s)) {\n      this.pilas.animar(this, \"escala_x\", s);\n    } else {\n      this.pilas.utilidades.validar_numero(s);\n      this.sprite.scaleX = s;\n\n      if (this.figura) {\n        this.pilas.Phaser.Physics.Matter.Matter.Body.scale(\n          this.sprite.body,\n          1 / this.escala_x,\n          1 / this.escala_y\n        );\n      }\n    }\n  }\n\n  get escala_x() {\n    return this.sprite.scaleX;\n  }\n\n  set escala_y(s) {\n    if (this.pilas.utilidades.es_animacion(s)) {\n      this.pilas.animar(this, \"escala_y\", s);\n    } else {\n      this.pilas.utilidades.validar_numero(s);\n      this.sprite.scaleY = s;\n\n      if (this.figura) {\n        this.pilas.Phaser.Physics.Matter.Matter.Body.scale(\n          this.sprite.body,\n          1 / this.escala_x,\n          1 / this.escala_y\n        );\n      }\n    }\n  }\n\n  get escala_y() {\n    return this.sprite.scaleY;\n  }\n\n  get escala() {\n    return this.escala_x;\n  }\n\n  set escala(escala) {\n    if (this.pilas.utilidades.es_animacion(escala)) {\n      this.pilas.animar(this, \"escala\", escala);\n    } else {\n      this.pilas.utilidades.validar_numero(escala);\n      this.escala_x = escala;\n      this.escala_y = escala;\n    }\n  }\n\n  get centro_y() {\n    return this.sprite.originY;\n  }\n\n  set centro_y(y) {\n    let comunes = {\n      centro: 0.5,\n      arriba: 0,\n      abajo: 1,\n      medio: 0.5\n    };\n\n    if (comunes[y] !== undefined) {\n      y = comunes[y];\n    }\n\n    this.pilas.utilidades.validar_numero(y);\n    this.sprite.setOrigin(this.centro_x, y);\n  }\n\n  get centro_x() {\n    return this.sprite.originX;\n  }\n\n  set centro_x(x) {\n    let comunes = {\n      centro: 0.5,\n      izquierda: 0,\n      derecha: 1,\n      medio: 0.5\n    };\n\n    if (comunes[x] !== undefined) {\n      x = comunes[x];\n    }\n\n    this.pilas.utilidades.validar_numero(x);\n    this.sprite.setOrigin(x, this.centro_y);\n  }\n\n  set transparencia(t) {\n    if (this.pilas.utilidades.es_animacion(t)) {\n      this.pilas.animar(this, \"transparencia\", t);\n    } else {\n      this.pilas.utilidades.validar_numero(t);\n      t = this.pilas.utilidades.limitar(t, 0, 100);\n      this.sprite.alpha = 1 - t / 100;\n    }\n  }\n\n  get transparencia() {\n    return (1 - this.sprite.alpha) * 100;\n  }\n\n  toString() {\n    let clase = this.constructor[\"name\"];\n    return `<${clase} en (${this.x}, ${this.y})>`;\n  }\n\n  fallar_si_no_tiene_figura() {\n    if (!this.figura) {\n      throw Error(\n        `Este actor no tiene figura física, no se puede llamar a este método`\n      );\n    }\n  }\n\n  crear_figura_rectangular(ancho: number = 0, alto: number = 0) {\n    this.fallar_si_no_tiene_figura();\n\n    this.pilas.utilidades.validar_numero(ancho);\n    this.pilas.utilidades.validar_numero(alto);\n\n    (this.sprite as any).setRectangle(ancho, alto);\n  }\n\n  crear_figura_circular(radio: number = 0) {\n    this.fallar_si_no_tiene_figura();\n\n    this.pilas.utilidades.validar_numero(radio);\n\n    if (radio) {\n      (this.sprite as any).setCircle(radio);\n    } else {\n      (this.sprite as any).setCircle();\n    }\n  }\n\n  get ancho() {\n    return this.sprite.width;\n  }\n\n  get alto() {\n    return this.sprite.height;\n  }\n\n  set alto(a: number) {\n    throw new Error(\"No puede definir este atributo\");\n  }\n\n  set ancho(a: number) {\n    throw new Error(\"No puede definir este atributo\");\n  }\n\n  get estatico() {\n    if ((this.sprite as any).isStatic !== undefined) {\n      return (this.sprite as any).isStatic();\n    } else {\n      console.warn(\"Este actor no tiene figura, se asume que no es estático.\");\n      return false;\n    }\n  }\n\n  set estatico(estatico: boolean) {\n    if ((this.sprite as any).setStatic !== undefined) {\n      (this.sprite as any).setStatic(estatico);\n      (this.sprite as any).setVelocity(0, 0);\n    } else {\n      console.warn(\n        \"Este actor no tiene figura, ignorando valor estatico/dinámico.\"\n      );\n    }\n  }\n\n  set dinamico(dinamico: boolean) {\n    this.estatico = !dinamico;\n  }\n\n  get dinamico() {\n    return !this.estatico;\n  }\n\n  impulsar(x, y) {\n    this.fallar_si_no_tiene_figura();\n    (this.sprite as any).setVelocity(x, -y);\n  }\n\n  get velocidad_x() {\n    this.fallar_si_no_tiene_figura();\n    return (this.sprite.body as any).velocity.x;\n  }\n\n  set velocidad_x(valor: number) {\n    this.fallar_si_no_tiene_figura();\n    (this.sprite as any).setVelocityX(valor);\n  }\n\n  get velocidad_y() {\n    this.fallar_si_no_tiene_figura();\n    return -(this.sprite.body as any).velocity.y;\n  }\n\n  set velocidad_y(valor: number) {\n    this.fallar_si_no_tiene_figura();\n    (this.sprite as any).setVelocityX(-valor);\n  }\n\n  set rebote(valor: number) {\n    this.pilas.utilidades.validar_numero(valor);\n    this.fallar_si_no_tiene_figura();\n    (this.sprite as any).setBounce(valor);\n  }\n\n  get rebote() {\n    this.fallar_si_no_tiene_figura();\n    return (this.sprite.body as any).restitution;\n  }\n\n  set sensor(valor: boolean) {\n    this.fallar_si_no_tiene_figura();\n    (this.sprite as any).setSensor(valor);\n  }\n\n  get sensor() {\n    this.fallar_si_no_tiene_figura();\n    return (this.sprite.body as any).isSensor;\n  }\n\n  get fijo() {\n    return this.sprite.scrollFactorX == 0;\n  }\n\n  set fijo(valor: boolean) {\n    if (valor) {\n      this.sprite.setScrollFactor(0, 0);\n    } else {\n      this.sprite.setScrollFactor(1, 1);\n    }\n  }\n\n  set espejado(valor: boolean) {\n    this.sprite.setFlipX(valor);\n  }\n\n  get espejado() {\n    return this.sprite.flipX;\n  }\n\n  set espejado_vertical(valor: boolean) {\n    this.sprite.setFlipY(valor);\n  }\n\n  get espejado_vertical() {\n    return this.sprite.flipY;\n  }\n\n  cada_segundo() {}\n\n  avanzar(rotacion: number = null, velocidad: number = 1) {\n    if (rotacion === null) {\n      rotacion = this.rotacion;\n    }\n\n    let r = this.pilas.utilidades.convertir_angulo_a_radianes(rotacion);\n\n    this.x += Math.cos(r) * velocidad;\n    this.y += Math.sin(r) * velocidad;\n  }\n\n  crear_animacion(nombre, cuadros, velocidad) {\n    this.pilas.animaciones.crear_animacion(this, nombre, cuadros, velocidad);\n  }\n\n  reproducir_animacion(nombre_de_la_animacion) {\n    let nombre = `${this.id}-${nombre_de_la_animacion}`;\n    this.sprite.anims.play(nombre);\n  }\n\n  set animacion(nombre) {\n    if (this._animacion_en_curso !== nombre) {\n      if (this.pilas.animaciones.existe_animacion(this, nombre)) {\n        this.reproducir_animacion(nombre);\n        this._animacion_en_curso = nombre;\n      } else {\n        throw Error(`No se ha creado la animación '${nombre}' previamente`);\n      }\n    }\n  }\n\n  get animacion() {\n    return this._animacion_en_curso;\n  }\n\n  cuando_comienza_una_colision(actor: Actor) {}\n\n  cuando_se_mantiene_una_colision(actor: Actor) {}\n\n  cuando_termina_una_colision(actor: Actor) {}\n\n  cuando_hace_click(x, y, evento_original) {}\n\n  cuando_termina_de_hacer_click(x, y, evento_original) {}\n\n  cuando_sale(x, y, evento_original) {}\n\n  cuando_mueve(x, y, evento_original) {}\n\n  get cantidad_de_colisiones() {\n    return this.colisiones.length;\n  }\n\n  agregar_sensor(ancho, alto, x, y) {\n    let pos = this.pilas.utilidades.convertir_coordenada_de_pilas_a_phaser(\n      x,\n      y\n    );\n\n    let figura = this.pilas.modo.matter.add.rectangle(\n      pos.x,\n      pos.y,\n      ancho,\n      alto,\n      {\n        isSensor: true,\n        isStatic: false\n      }\n    );\n\n    figura.distancia_x = x;\n    figura.distancia_y = y;\n\n    figura.sensor_del_actor = this;\n    figura.colisiones = [];\n\n    this.sensores.push(figura);\n    return figura;\n  }\n\n  eliminar() {\n    this._vivo = false;\n    this.sensores.map(s => {\n      this.pilas.modo.matter.world.remove(s);\n    });\n  }\n\n  esta_vivo() {\n    return this._vivo;\n  }\n\n  set figura_ancho(valor: number) {\n    throw new Error(\"No puede definir este atributo\");\n  }\n\n  get figura_ancho() {\n    return this._figura_ancho;\n  }\n\n  set figura_alto(valor: number) {\n    throw new Error(\"No puede definir este atributo\");\n  }\n\n  get figura_alto() {\n    return this._figura_alto;\n  }\n\n  set figura_radio(valor: number) {\n    throw new Error(\"No puede definir este atributo\");\n  }\n\n  get figura_radio() {\n    return this._figura_radio;\n  }\n\n  /**\n   * Muestra un mensaje como si se tratara de un globo de historieta. Llamar\n   * a este método borra el dialogo anterior si existiera.\n   */\n  decir(mensaje: string) {\n    if (this._dialogo) {\n      this._dialogo.eliminar();\n      this._dialogo = null;\n    }\n\n    let texto = this.pilas.actores.texto();\n    texto.texto = mensaje;\n    texto.x = this.x - 15;\n    texto.y = this.y + this.alto;\n    texto.transparencia = 100;\n    texto.transparencia = [0];\n    texto.fondo = \"imagenes:redimensionables_dialogo.png\";\n    texto.color = \"black\";\n    texto.centro_x = 1;\n    texto.centro_y = 1;\n\n    texto.texto = mensaje;\n\n    this._dialogo = texto;\n\n    this.pilas.luego(4, () => {\n      if (texto.esta_vivo()) {\n        texto.eliminar();\n\n        if (texto === this._dialogo) {\n          this._dialogo = null;\n        }\n      }\n    });\n  }\n\n  aprender(habilidad: string) {\n    let clase = this.pilas.habilidades.buscar(habilidad);\n\n    if (clase) {\n      if (this.tieneHabilidad(clase.name)) {\n        console.warn(\n          `No se aplica la habilidad ${\n            clase.name\n          } porque el actor ya la tenía vinculada.`\n        );\n      } else {\n        let instancia = new clase(this.pilas, this);\n        instancia.iniciar();\n        this._habilidades.push(instancia);\n      }\n    }\n  }\n\n  tieneHabilidad(habilidad: string) {\n    return (\n      this._habilidades.filter(h => {\n        return h.constructor.name === habilidad;\n      }).length > 0\n    );\n  }\n}\n",
      "archivo": "-actor-base.ts"
    },
    {
      "nombre": "-actor-texto-base",
      "codigo": "class ActorTextoBase extends ActorBase {\n  propiedades = {\n    imagen: \"imagenes:invisible.png\",\n    texto: \"Hola mundo\",\n    es_texto: true\n  };\n\n  margen_interno: number = 30;\n\n  iniciar() {\n    // TODO: convertir en una propiedad y llevar al método pre_iniciar didDestroyElement() {\n    // actor base\n    this.color = \"black\";\n  }\n\n  pre_actualizar() {\n    super.pre_actualizar();\n\n    this.copiar_atributos_de_sprite(this.sprite, this._texto);\n\n    if (this._fondo) {\n      this.copiar_atributos_de_sprite(this.sprite, this._fondo);\n      this._texto.depth = this._texto.depth + 1;\n      this._fondo.x +=\n        this.margen_interno * this.sprite.originX - this.margen_interno * 0.5;\n      this._fondo.y +=\n        this.margen_interno * this.sprite.originY - this.margen_interno * 0.5;\n    }\n  }\n\n  actualizar() {}\n\n  set sombra(valor: boolean) {\n    if (valor) {\n      this._texto.setShadow(1, 1, \"white\", 2);\n    } else {\n      this._texto.setShadow();\n    }\n  }\n\n  set texto(texto: string) {\n    if (!this._texto) {\n      this._texto = this.pilas.modo.add.text(0, 0, texto);\n      this._texto.setFontFamily(\"verdana\");\n    } else {\n      this._texto.setText(texto);\n    }\n\n    this.actualizar_tamano_del_fondo();\n  }\n\n  get texto() {\n    return this._texto.text;\n  }\n\n  set fondo(fondo: string) {\n    this._fondo_imagen = fondo;\n\n    if (!this._fondo) {\n      this.crear_fondo(fondo);\n    } else {\n      this._fondo.destroy();\n      this.crear_fondo(fondo);\n    }\n  }\n\n  private crear_fondo(fondo) {\n    let imagen = null;\n\n    if (fondo.indexOf(\":\") > -1) {\n      let partes = fondo.split(\":\");\n      imagen = { key: partes[0], frame: partes[1] };\n    } else {\n      imagen = fondo;\n    }\n\n    this._fondo = this.pilas.modo.add[\"nineslice\"](\n      0,\n      0,\n      30,\n      20,\n      imagen,\n      10,\n      10\n    );\n    this.actualizar_tamano_del_fondo();\n  }\n\n  private actualizar_tamano_del_fondo() {\n    this.definir_area_de_interactividad(this._texto.width, this._texto.height);\n\n    if (!this._fondo) {\n      return;\n    }\n\n    let ancho = this._texto.width + this.margen_interno;\n    let alto = this._texto.height + this.margen_interno;\n\n    this._fondo.resize(ancho, alto);\n    this.definir_area_de_interactividad(ancho, alto);\n  }\n\n  set magnitud(numero: number) {\n    this._texto.setFontSize(numero);\n    this.actualizar_tamano_del_fondo();\n  }\n\n  set color(color: string) {\n    this._texto.setColor(color);\n  }\n\n  eliminar() {\n    super.eliminar();\n  }\n}\n",
      "archivo": "-actor-texto-base.ts"
    },
    {
      "nombre": "-actor",
      "codigo": "class Actor extends ActorBase {\n  propiedades = {};\n\n  iniciar() {}\n\n  actualizar() {}\n}\n",
      "archivo": "-actor.ts"
    },
    {
      "nombre": "aceituna",
      "codigo": "class aceituna extends Actor {\n  propiedades = {\n    imagen: \"imagenes:aceituna.png\"\n  };\n\n  iniciar() {\n    this.imagen = \"imagenes:aceituna.png\";\n  }\n}\n",
      "archivo": "aceituna.ts"
    },
    {
      "nombre": "actor",
      "codigo": "class actor extends Actor {\n  propiedades = {\n    imagen: \"imagenes:sin_imagen.png\"\n  };\n\n  iniciar() {}\n\n  actualizar() {}\n}\n",
      "archivo": "actor.ts"
    },
    {
      "nombre": "boton",
      "codigo": "class boton extends ActorTextoBase {\n  propiedades = {\n    imagen: \"imagenes:invisible.png\",\n    fondo: \"imagenes:redimensionables_gris.png\",\n    texto: \"Botón\",\n    es_texto: true\n  };\n\n  cuando_hace_click() {\n    this.decir(\"¡has hecho click!\");\n    this.y -= 2;\n\n    this.pilas.luego(0.2, () => {\n      this.y += 2;\n    });\n  }\n\n  cuando_mueve() {\n    this.pilas.definir_cursor(\"pointer\");\n  }\n\n  cuando_sale() {\n    this.pilas.definir_cursor(\"normal\");\n  }\n}\n",
      "archivo": "boton.ts"
    },
    {
      "nombre": "caja",
      "codigo": "class caja extends Actor {\n  propiedades = {\n    x: 0,\n    y: 0,\n    imagen: \"imagenes:caja.png\",\n    etiqueta: \"caja\",\n    figura: \"rectangulo\",\n    figura_ancho: 45,\n    figura_alto: 45,\n    figura_rebote: 0.9\n  };\n\n  iniciar() {}\n}\n",
      "archivo": "caja.ts"
    },
    {
      "nombre": "conejo",
      "codigo": "class conejo extends Actor {\n  propiedades = {\n    x: 0,\n    y: 0,\n    imagen: \"imagenes:conejo_parado1.png\",\n\n    figura: \"rectangulo\",\n    figura_ancho: 50,\n    figura_alto: 100,\n    figura_radio: 50,\n    figura_sin_rotacion: true,\n    figura_dinamica: true,\n    figura_rebote: 0\n  };\n\n  toca_el_suelo = false;\n  pies = null;\n\n  iniciar() {\n    this.crear_animaciones();\n    this.estado = \"parado\";\n    this.pies = this.agregar_sensor(50, 10, 0, -50);\n  }\n\n  crear_animaciones() {\n    this.crear_animacion(\n      \"conejo_parado\",\n      [\"imagenes:conejo_parado1.png\", \"imagenes:conejo_parado2.png\"],\n      2\n    );\n    this.crear_animacion(\n      \"conejo_camina\",\n      [\"imagenes:conejo_camina1.png\", \"imagenes:conejo_camina2.png\"],\n      20\n    );\n    this.crear_animacion(\"conejo_salta\", [\"imagenes:conejo_salta.png\"], 20);\n    this.crear_animacion(\"conejo_muere\", [\"imagenes:conejo_muere.png\"], 1);\n  }\n\n  actualizar() {\n    if (this.pies.colisiones.length > 0) {\n      this.toca_el_suelo = true;\n    } else {\n      this.toca_el_suelo = false;\n    }\n  }\n\n  parado_iniciar() {\n    this.reproducir_animacion(\"conejo_parado\");\n  }\n\n  parado_actualizar() {\n    if (this.pilas.control.izquierda || this.pilas.control.derecha) {\n      this.estado = \"camina\";\n    }\n\n    if (this.pilas.control.arriba && this.toca_el_suelo) {\n      this.impulsar(0, 10);\n      this.estado = \"salta\";\n    }\n\n    if (!this.toca_el_suelo) {\n      this.estado = \"salta\";\n    }\n  }\n\n  camina_iniciar() {\n    this.reproducir_animacion(\"conejo_camina\");\n  }\n\n  camina_actualizar() {\n    if (this.pilas.control.izquierda) {\n      this.x -= 5;\n      this.espejado = true;\n    }\n\n    if (this.pilas.control.derecha) {\n      this.x += 5;\n      this.espejado = false;\n    }\n\n    if (!this.pilas.control.derecha && !this.pilas.control.izquierda) {\n      this.estado = \"parado\";\n      return;\n    }\n\n    if (this.pilas.control.arriba && this.toca_el_suelo) {\n      this.impulsar(0, 10);\n      this.estado = \"salta\";\n    }\n\n    if (!this.toca_el_suelo) {\n      this.estado = \"salta\";\n    }\n  }\n\n  salta_iniciar() {\n    this.reproducir_animacion(\"conejo_salta\");\n  }\n\n  salta_actualizar() {\n    if (this.pilas.control.izquierda) {\n      this.x -= 5;\n    }\n\n    if (this.pilas.control.derecha) {\n      this.x += 5;\n    }\n\n    if (this.toca_el_suelo) {\n      this.estado = \"parado\";\n    }\n  }\n\n  cuando_comienza_una_colision(actor) {\n    if (actor.etiqueta === \"moneda\") {\n      this.pilas.reproducir_sonido(\"moneda\");\n      actor.eliminar();\n    }\n\n    if (actor.etiqueta === \"plataforma\") {\n      if (this.velocidad_y > 0.1) {\n        return true;\n      }\n    }\n  }\n\n  cuando_se_mantiene_una_colision(actor) {}\n\n  cuando_termina_una_colision(actor) {}\n}\n",
      "archivo": "conejo.ts"
    },
    {
      "nombre": "deslizador",
      "codigo": "class deslizador extends Actor {\n  propiedades = {\n    x: 0,\n    y: 0,\n    imagen: \"imagenes:interfaz_linea.png\",\n    etiqueta: \"deslizador\",\n    figura: \"\"\n  };\n\n  valor: number = 0;\n  marca: Actor;\n  esta_arrastrando_el_deslizador;\n\n  iniciar() {\n    this.imagen = \"imagenes:interfaz_linea.png\";\n    this.esta_arrastrando_el_deslizador = false;\n    this.crear_marca();\n    this.conectar_eventos();\n  }\n\n  conectar_eventos() {\n    this.pilas.eventos.conectar(\"mueve_mouse\", datos => {\n      this.cuando_mueve_el_mouse(datos);\n    });\n\n    this.pilas.eventos.conectar(\"termina_click\", () => {\n      this.cuando_termina_de_hacer_click();\n    });\n  }\n\n  crear_marca() {\n    this.marca = this.pilas.actores.actor();\n    this.marca.imagen = \"imagenes:interfaz_deslizador.png\";\n\n    // Hacer que la marca del deslizador ignore clicks.\n    this.marca.interactivo = false;\n  }\n\n  cuando_hace_click(x, y) {\n    this.esta_arrastrando_el_deslizador = true;\n    this.ajustar_marca(x);\n  }\n\n  private cuando_mueve_el_mouse(datos) {\n    if (this.esta_arrastrando_el_deslizador) {\n      this.ajustar_marca(datos.x);\n    }\n  }\n\n  cuando_termina_de_hacer_click() {\n    this.esta_arrastrando_el_deslizador = false;\n  }\n\n  actualizar() {\n    this.marca.x = this.x - 90 + 1.8 * this.valor;\n    this.marca.y = this.y;\n  }\n\n  private ajustar_marca(x) {\n    let dx = x - this.x;\n\n    // aplica límites porque el deslizador es de unos 180 píxeles.\n    dx = Math.max(dx, -90);\n    dx = Math.min(dx, 90);\n\n    this.valor = (dx + 90) / 1.8;\n  }\n}\n",
      "archivo": "deslizador.ts"
    },
    {
      "nombre": "gallina",
      "codigo": "class gallina extends Actor {\n  propiedades = {\n    x: 0,\n    y: 0,\n    imagen: \"imagenes:gallina_vuela_3.png\",\n\n    figura: \"circulo\",\n    figura_radio: 30,\n    figura_sin_rotacion: true,\n    figura_dinamica: true,\n    figura_rebote: 0\n  };\n\n  iniciar() {\n    this.crear_animacion(\n      \"gallina_vuela\",\n      [\n        \"imagenes:gallina_vuela_1.png\",\n        \"imagenes:gallina_vuela_1.png\",\n        \"imagenes:gallina_vuela_2.png\",\n        \"imagenes:gallina_vuela_3.png\",\n        \"imagenes:gallina_vuela_2.png\"\n      ],\n      15\n    );\n    this.crear_animacion(\"gallina_muere\", [\"imagenes:gallina_muere.png\"], 20);\n    this.crear_animacion(\n      \"gallina_sin_piel\",\n      [\"imagenes:gallina_sin_piel.png\"],\n      20\n    );\n\n    this.estado = \"vuela\";\n  }\n\n  actualizar() {}\n\n  vuela_iniciar() {\n    this.reproducir_animacion(\"gallina_vuela\");\n  }\n\n  vuela_actualizar() {}\n\n  // # TODO: Implementar este tipo de manejadores, para que desde los estados de autómata se puedan crear colisiones.\n  vuela_cuando_comienza_una_colision(actor) {}\n}\n",
      "archivo": "gallina.ts"
    },
    {
      "nombre": "laser",
      "codigo": "class laser extends Actor {\n  propiedades = {\n    imagen: \"imagenes:laser.png\"\n  };\n\n  velocidad;\n\n  iniciar() {\n    this.centro_x = 0.3;\n    this.velocidad = 10;\n    this.pilas.reproducir_sonido(\"laser\");\n  }\n\n  actualizar() {\n    this.avanzar(this.rotacion, this.velocidad);\n\n    // TODO: reemplazar por un chequeo tipo fuera_de_pantalla = true\n    if (this.x > 400 || this.x < -400 || this.y > 400 || this.y < -400) {\n      this.eliminar();\n    }\n  }\n}\n",
      "archivo": "laser.ts"
    },
    {
      "nombre": "logo",
      "codigo": "class logo extends Actor {\n  propiedades = {\n    imagen: \"imagenes:logo.png\"\n  };\n\n  iniciar() {}\n}\n",
      "archivo": "logo.ts"
    },
    {
      "nombre": "moneda",
      "codigo": "class moneda extends Actor {\n  propiedades = {\n    imagen: \"imagenes:moneda.png\",\n    etiqueta: \"moneda\",\n    figura: \"circulo\",\n    figura_radio: 10,\n    figura_dinamica: false,\n    figura_sensor: true\n  };\n}\n",
      "archivo": "moneda.ts"
    },
    {
      "nombre": "nave",
      "codigo": "class nave extends Actor {\n  propiedades = {\n    imagen: \"imagenes:nave_reposo.png\"\n  };\n\n  velocidad = 5;\n  cuadros_desde_el_ultimo_disparo;\n\n  iniciar() {\n    this.crear_animaciones();\n    this.animacion = \"nave_en_reposo\";\n    this.cuadros_desde_el_ultimo_disparo = 0;\n  }\n\n  crear_animaciones() {\n    this.crear_animacion(\"nave_en_reposo\", [\"imagenes:nave_reposo.png\"], 2);\n\n    this.crear_animacion(\n      \"nave_avanzando\",\n      [\"imagenes:nave_avanza_1.png\", \"imagenes:nave_avanza_2.png\"],\n      20\n    );\n\n    this.crear_animacion(\n      \"nave_girando_a_la_izquierda\",\n      [\"imagenes:nave_izquierda_1.png\", \"imagenes:nave_izquierda_2.png\"],\n      20\n    );\n    this.crear_animacion(\n      \"nave_girando_a_la_derecha\",\n      [\"imagenes:nave_derecha_1.png\", \"imagenes:nave_derecha_2.png\"],\n      20\n    );\n  }\n\n  actualizar() {\n    this.cuadros_desde_el_ultimo_disparo += 1;\n\n    if (this.pilas.control.izquierda) {\n      this.rotacion += this.velocidad;\n      this.animacion = \"nave_girando_a_la_izquierda\";\n    }\n\n    if (this.pilas.control.derecha) {\n      this.rotacion -= this.velocidad;\n      this.animacion = \"nave_girando_a_la_derecha\";\n    }\n\n    if (\n      this.pilas.control.espacio &&\n      this.cuadros_desde_el_ultimo_disparo > 5\n    ) {\n      let laser = this.pilas.actores.laser();\n      laser.x = this.x;\n      laser.y = this.y;\n      laser.rotacion = this.rotacion;\n      laser.z = this.z + 1;\n      this.cuadros_desde_el_ultimo_disparo = 0;\n    }\n\n    if (this.pilas.control.arriba) {\n      this.avanzar(this.rotacion, this.velocidad);\n      this.animacion = \"nave_avanzando\";\n    } else {\n      if (!this.pilas.control.izquierda && !this.pilas.control.derecha) {\n        this.animacion = \"nave_en_reposo\";\n      }\n    }\n  }\n}\n",
      "archivo": "nave.ts"
    },
    {
      "nombre": "nube",
      "codigo": "class nube extends Actor {\n  propiedades = {\n    imagen: \"imagenes:nube.png\"\n  };\n\n  iniciar() {}\n}\n",
      "archivo": "nube.ts"
    },
    {
      "nombre": "pared",
      "codigo": "class pared extends Actor {\n  propiedades = {\n    figura: \"rectangulo\",\n    imagen: \"imagenes:pared.png\",\n    y: 0,\n    figura_ancho: 20,\n    figura_alto: 600,\n    figura_dinamica: false,\n    figura_rebote: 0\n  };\n\n  iniciar() {}\n}\n",
      "archivo": "pared.ts"
    },
    {
      "nombre": "pelota",
      "codigo": "class pelota extends Actor {\n  propiedades = {\n    imagen: \"imagenes:pelota.png\",\n    figura: \"circulo\",\n    figura_radio: 25\n  };\n\n  iniciar() {}\n}\n",
      "archivo": "pelota.ts"
    },
    {
      "nombre": "plataforma",
      "codigo": "class plataforma extends Actor {\n  propiedades = {\n    figura: \"rectangulo\",\n    imagen: \"imagenes:plataforma.png\",\n    etiqueta: \"plataforma\",\n    y: 0,\n    figura_ancho: 250,\n    figura_alto: 40,\n    figura_dinamica: false,\n    figura_rebote: 0\n  };\n\n  iniciar() {}\n}\n",
      "archivo": "plataforma.ts"
    },
    {
      "nombre": "suelo",
      "codigo": "class suelo extends Actor {\n  propiedades = {\n    figura: \"rectangulo\",\n    imagen: \"imagenes:suelo.png\",\n    figura_ancho: 600,\n    figura_alto: 25,\n    figura_dinamica: false\n  };\n\n  iniciar() {}\n}\n",
      "archivo": "suelo.ts"
    },
    {
      "nombre": "techo",
      "codigo": "class techo extends Actor {\n  propiedades = {\n    figura: \"rectangulo\",\n    imagen: \"imagenes:techo.png\",\n    figura_ancho: 600,\n    figura_alto: 25,\n    figura_dinamica: false\n  };\n\n  iniciar() {}\n}\n",
      "archivo": "techo.ts"
    },
    {
      "nombre": "texto",
      "codigo": "class texto extends ActorTextoBase {\n  propiedades = {\n    imagen: \"imagenes:invisible.png\",\n    texto: \"Hola mundo\",\n    es_texto: true\n  };\n}\n",
      "archivo": "texto.ts"
    }
  ]
}